# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  appImageName: '$(app_image_name):$(build.buildId)'
  testImageName: '$(test_image_name):$(build.buildId)'
  registryName: 'YOUR CONTAINER REGISTRY.azurecr.io'
  SubscriptionEndpointName: 'NAME OF YOUR ENDPOINT'
  appDirectory: 'sampleapp'
  testDirectory: 'TEST HARNESS DIRECTORY WITHOUT TRAILING SLASH'

steps:
- task: Bash@3
  displayName: 'Test'
  inputs:
    targetType: inline
    script: echo $(appImageName) && echo $(testImageName)
# Build the application docker image using the Dockerfile in the directory
# - script: docker build -f $(appDirectory)/Dockerfile -t $(appImageName) .
#   displayName: 'Build app Docker Image'
- script: docker version .
  displayName: 'Build app Docker Image'
# Build the test harness docker image using the Dockerfile in the relevant directory
# - script: docker build -f $(testDirectory)/Dockerfile -t $(testImageName) .
#   displayName: 'Build app Docker Image'
# Install Helm
- task: HelmInstaller@0
  displayName: 'Install Helm 2.11.0'
  inputs:
    helmVersion: 2.11.0
    installKubectl: false
# Lint the Helm via the "helm lint" command
# This assumes that your helm files are in the Charts subdirectory within the app directory
# - task: Bash@3
#   displayName: 'Lint Helm'
#   inputs:
#     targetType: inline
#     script: helm lint $(appDirectory)/charts/$(appDirectory)/
# Login to the Docker registry (or ACR) using the Subscription Endpoint preconfigured at the start
- task: Docker@1
  displayName: Login
  inputs:
    azureSubscriptionEndpoint: $(SubscriptionEndpointName)
    azureContainerRegistry: $(registryName)
    command: login
# Push the app image to the registry
# - task: Docker@1
#   displayName: 'Push app image'
#   inputs:
#     command: 'push'
#     ImageName: $(registryName)/$(appImageName)
# Push the test image to the registry
# - task: Docker@1
#   displayName: 'Push test image'
#   inputs:
#     command: 'push'
#     ImageName: $(registryName)/$(testImageName)
# Publish Helm Directory
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifact: drop'
#   inputs:
#     PathtoPublish: $(appDirectory)/charts/$(appDirectory)/