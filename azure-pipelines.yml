# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# Assumptions: 
#     -You have created a Service Connection in Azure Devops for the Resource Group containing your ACR
#     -All relevant helm files are in a subdirectory titled "Charts" of the application
#     -The application and test harness each have their own subdirectory

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  appImageName: 'mldevopsapp:$(build.buildId)'
  testImageName: 'mldevopstest:$(build.buildId)'
  registryName: 'testwsacrbkftipma.azurecr.io'
  SubscriptionEndpointName: 'ACRConnection'
  appDirectory: 'sampleapp'
  testDirectory: 'testHarness'

steps:
# Build the application docker image using the Dockerfile in the directory
- script: docker build -f $(appDirectory)/Dockerfile -t $(registryName)/$(appImageName) .
  displayName: 'Build app Docker Image'
# Build the test harness docker image using the Dockerfile in the relevant directory
- script: docker build -f $(testDirectory)/Dockerfile -t $(registryName)/$(testImageName) .
  displayName: 'Build app Docker Image'
# Install Helm
- task: HelmInstaller@0
  displayName: 'Install Helm 2.9.1'
  inputs:
    helmVersion: 2.9.1
    installKubectl: false
# Lint the Helm via the "helm lint" command
# This assumes that your helm files are in the Charts subdirectory within the app directory
- task: Bash@3
  displayName: 'Lint Helm (PLACEHOLDER)'
  inputs:
    targetType: inline
    script: helm lint $(appDirectory)/$(appDirectory)/
# Login to the Docker registry (or ACR) using the Subscription Endpoint preconfigured at the start
- task: Docker@1
  displayName: Login
  inputs:
    azureSubscriptionEndpoint: $(SubscriptionEndpointName)
    azureContainerRegistry: $(registryName)
    command: login
# Push the app image to the registry
- task: Docker@1
  displayName: 'Push app image'
  inputs:
    command: 'push'
    ImageName: $(registryName)/$(appImageName)
# Push the test image to the registry
- task: Docker@1
  displayName: 'Push test image'
  inputs:
    command: 'push'
    ImageName: $(registryName)/$(testImageName)
# # Package the Helm files to the staging directory (default location when save is false)
# - task: HelmDeploy@0
#   displayName: 'helm package'
#   inputs:
#     command: package
#     chartPath: $(appDirectory)/$(appDirectory)/
#     save: false
# Publish Helm Directory
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: $(appDirectory)/$(appDirectory)/